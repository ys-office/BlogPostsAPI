openapi: 3.0.0
info:
  title: Blog Posts API
  description: |
    This is an example API for blog posts using OpenApi Specification.
    ---
    Using this API you can retrieve blog posts, comments on each blog post and delete or update the posts.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Amir Lavasani
    url: https://amir.lavasani.dev
    email: amirm.lavasani@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/ys-office-me/harmony-for-job-tree-japan/1.0.0
  description: SwaggerHub API Auto Mocking
- url: '{protocol}://{environment}.example.com/v1'
  variables:
    environment:
      default: api
      enum:
      - api
      - api.dev
      - api.staging
    protocol:
      default: https
      enum:
      - http
      - https
paths:
  /posts:
    get:
      tags:
      - Posts
      summary: Return all the posts
      description: Return all the posts that are in our blog.
      responses:
        "200":
          description: An array of blog posts in JSON format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
    post:
      tags:
      - Posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "201":
          description: The request has succeeded and a new resource has been created
            as a result.
  /posts/{id}:
    get:
      tags:
      - Posts
      summary: Return a post
      description: Return a post with postId equals to id.
      parameters:
      - name: id
        in: path
        description: The postId requested by user.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A blog posts in JSON format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
      - Posts
      summary: Update a post
      description: A  complete replacement of a post with id.
      parameters:
      - name: id
        in: path
        description: The postId requested by user.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        "200":
          description: Updated the post completely.
    delete:
      tags:
      - Posts
      summary: Deletes a post
      description: Deletes the post with id.
      parameters:
      - name: id
        in: path
        description: The postId requested by user.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: The resource was deleted successfully.
    patch:
      tags:
      - Posts
      summary: Update a post
      description: Update the post with id partially.
      parameters:
      - name: id
        in: path
        description: The postId requested by user.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPost'
        required: true
      responses:
        "200":
          description: Updated the post partially.
  /comments:
    get:
      tags:
      - Comments
      summary: Return comments
      description: Return comments on a post with postId={id}.
      parameters:
      - name: postId
        in: query
        description: The postId which we want the comments
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A list of comments JSON format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
components:
  schemas:
    Posts:
      type: array
      description: An array of post objects.
      example:
      - userId: 1
        id: 1
        title: First post
        body: This is the first post body.
      - userId: 1
        id: 2
        title: Second post
        body: The second post content.
      - userId: 1
        id: 3
        title: Another post
        body: Other post content
      items:
        $ref: '#/components/schemas/Post'
    Post:
      required:
      - body
      - id
      - title
      - userId
      type: object
      properties:
        id:
          type: string
          description: The post id.
        userId:
          type: string
          description: The post userId.
        title:
          type: string
          description: The title of the post
        body:
          type: string
          description: The body content of the post
      example:
        userId: 1
        id: 1
        title: The First Post
        body: we are building a blog post API using OpenAPI Specification.
    PatchPost:
      type: object
      properties:
        id:
          type: string
          description: The post id.
        userId:
          type: string
          description: The post userId.
        title:
          type: string
          description: The title of the post
        body:
          type: string
          description: The body content of the post
    Comments:
      type: array
      description: The array of comment objects
      example:
      - postId: 1
        id: 1
        name: id labore ex et quam laborum
        email: Eliseo@gardner.biz
        body: laudantium enim quasi est quidem magnam voluptate
      - postId: 1
        id: 2
        name: quo vero reiciendis velit similique earum
        email: Jayne_Kuhic@sydney.com
        body: est natus enim nihil est dolore omnis voluptatem
      - postId: 1
        id: 3
        name: odio adipisci rerum aut animi
        email: Nikita@garfield.biz
        body: quia molestiae reprehenderit quasi aspernatur
      items:
        $ref: '#/components/schemas/Comment'
    Comment:
      type: object
      properties:
        id:
          type: string
          description: The comment id.
        postId:
          type: string
          description: The comment postId.
        name:
          type: string
          description: The name of the comment.
        email:
          type: string
          description: The email of the user who posted the comment.
        body:
          type: string
          description: The comment body.
      example:
        id: 1
        postId: 1
        name: The first comment
        email: example@example.com
        body: This is the first comment!
