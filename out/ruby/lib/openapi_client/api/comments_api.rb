=begin
#Blog Posts API

#This is an example API for blog posts using OpenApi Specification. --- Using this API you can retrieve blog posts, comments on each blog post and delete or update the posts. 

The version of the OpenAPI document: 1.0.0
Contact: amirm.lavasani@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class CommentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return comments
    # Return comments on a post with postId={id}.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_id The postId which we want the comments
    # @return [Array<Comment>]
    def comments_get(opts = {})
      data, _status_code, _headers = comments_get_with_http_info(opts)
      data
    end

    # Return comments
    # Return comments on a post with postId&#x3D;{id}.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :post_id The postId which we want the comments
    # @return [Array<(Array<Comment>, Integer, Hash)>] Array<Comment> data, response status code and response headers
    def comments_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CommentsApi.comments_get ...'
      end
      # resource path
      local_var_path = '/comments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'postId'] = opts[:'post_id'] if !opts[:'post_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Comment>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CommentsApi#comments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
