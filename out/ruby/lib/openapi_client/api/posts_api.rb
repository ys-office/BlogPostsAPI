=begin
#Blog Posts API

#This is an example API for blog posts using OpenApi Specification. --- Using this API you can retrieve blog posts, comments on each blog post and delete or update the posts. 

The version of the OpenAPI document: 1.0.0
Contact: amirm.lavasani@gmail.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class PostsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return all the posts
    # Return all the posts that are in our blog.
    # @param [Hash] opts the optional parameters
    # @return [Array<Post>]
    def posts_get(opts = {})
      data, _status_code, _headers = posts_get_with_http_info(opts)
      data
    end

    # Return all the posts
    # Return all the posts that are in our blog.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Post>, Integer, Hash)>] Array<Post> data, response status code and response headers
    def posts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostsApi.posts_get ...'
      end
      # resource path
      local_var_path = '/posts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Post>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostsApi#posts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a post
    # Deletes the post with id.
    # @param id [String] The postId requested by user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def posts_id_delete(id, opts = {})
      posts_id_delete_with_http_info(id, opts)
      nil
    end

    # Deletes a post
    # Deletes the post with id.
    # @param id [String] The postId requested by user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def posts_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostsApi.posts_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PostsApi.posts_id_delete"
      end
      # resource path
      local_var_path = '/posts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostsApi#posts_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a post
    # Return a post with postId equals to id.
    # @param id [String] The postId requested by user.
    # @param [Hash] opts the optional parameters
    # @return [Post]
    def posts_id_get(id, opts = {})
      data, _status_code, _headers = posts_id_get_with_http_info(id, opts)
      data
    end

    # Return a post
    # Return a post with postId equals to id.
    # @param id [String] The postId requested by user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Post, Integer, Hash)>] Post data, response status code and response headers
    def posts_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostsApi.posts_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PostsApi.posts_id_get"
      end
      # resource path
      local_var_path = '/posts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Post' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostsApi#posts_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a post
    # Update the post with id partially.
    # @param id [String] The postId requested by user.
    # @param patch_post [PatchPost] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def posts_id_patch(id, patch_post, opts = {})
      posts_id_patch_with_http_info(id, patch_post, opts)
      nil
    end

    # Update a post
    # Update the post with id partially.
    # @param id [String] The postId requested by user.
    # @param patch_post [PatchPost] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def posts_id_patch_with_http_info(id, patch_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostsApi.posts_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PostsApi.posts_id_patch"
      end
      # verify the required parameter 'patch_post' is set
      if @api_client.config.client_side_validation && patch_post.nil?
        fail ArgumentError, "Missing the required parameter 'patch_post' when calling PostsApi.posts_id_patch"
      end
      # resource path
      local_var_path = '/posts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(patch_post) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostsApi#posts_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a post
    # A  complete replacement of a post with id.
    # @param id [String] The postId requested by user.
    # @param post [Post] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def posts_id_put(id, post, opts = {})
      posts_id_put_with_http_info(id, post, opts)
      nil
    end

    # Update a post
    # A  complete replacement of a post with id.
    # @param id [String] The postId requested by user.
    # @param post [Post] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def posts_id_put_with_http_info(id, post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostsApi.posts_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PostsApi.posts_id_put"
      end
      # verify the required parameter 'post' is set
      if @api_client.config.client_side_validation && post.nil?
        fail ArgumentError, "Missing the required parameter 'post' when calling PostsApi.posts_id_put"
      end
      # resource path
      local_var_path = '/posts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(post) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostsApi#posts_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param post [Post] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def posts_post(post, opts = {})
      posts_post_with_http_info(post, opts)
      nil
    end

    # @param post [Post] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def posts_post_with_http_info(post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PostsApi.posts_post ...'
      end
      # verify the required parameter 'post' is set
      if @api_client.config.client_side_validation && post.nil?
        fail ArgumentError, "Missing the required parameter 'post' when calling PostsApi.posts_post"
      end
      # resource path
      local_var_path = '/posts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(post) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PostsApi#posts_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
