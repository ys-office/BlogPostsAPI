/**
 * Blog Posts API
 * This is an example API for blog posts using OpenApi Specification. --- Using this API you can retrieve blog posts, comments on each blog post and delete or update the posts. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: amirm.lavasani@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchPost from '../model/PatchPost';
import Post from '../model/Post';

/**
* Posts service.
* @module api/PostsApi
* @version 1.0.0
*/
export default class PostsApi {

    /**
    * Constructs a new PostsApi. 
    * @alias module:api/PostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postsGet operation.
     * @callback module:api/PostsApi~postsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Post>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all the posts
     * Return all the posts that are in our blog.
     * @param {module:api/PostsApi~postsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Post>}
     */
    postsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Post];
      return this.apiClient.callApi(
        '/posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsIdDelete operation.
     * @callback module:api/PostsApi~postsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a post
     * Deletes the post with id.
     * @param {String} id The postId requested by user.
     * @param {module:api/PostsApi~postsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/posts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsIdGet operation.
     * @callback module:api/PostsApi~postsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a post
     * Return a post with postId equals to id.
     * @param {String} id The postId requested by user.
     * @param {module:api/PostsApi~postsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    postsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/posts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsIdPatch operation.
     * @callback module:api/PostsApi~postsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a post
     * Update the post with id partially.
     * @param {String} id The postId requested by user.
     * @param {module:model/PatchPost} patchPost 
     * @param {module:api/PostsApi~postsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postsIdPatch(id, patchPost, callback) {
      let postBody = patchPost;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postsIdPatch");
      }
      // verify the required parameter 'patchPost' is set
      if (patchPost === undefined || patchPost === null) {
        throw new Error("Missing the required parameter 'patchPost' when calling postsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/posts/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsIdPut operation.
     * @callback module:api/PostsApi~postsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a post
     * A  complete replacement of a post with id.
     * @param {String} id The postId requested by user.
     * @param {module:model/Post} post 
     * @param {module:api/PostsApi~postsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postsIdPut(id, post, callback) {
      let postBody = post;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postsIdPut");
      }
      // verify the required parameter 'post' is set
      if (post === undefined || post === null) {
        throw new Error("Missing the required parameter 'post' when calling postsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/posts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsPost operation.
     * @callback module:api/PostsApi~postsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Post} post 
     * @param {module:api/PostsApi~postsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postsPost(post, callback) {
      let postBody = post;
      // verify the required parameter 'post' is set
      if (post === undefined || post === null) {
        throw new Error("Missing the required parameter 'post' when calling postsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/posts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
